1. What is Dependency Injection and Inversion of Control?
 - Dependency injection is a design pattern that implements the Inversion of Control for resolving the dependencies at run-time, i.e., injecting the dependency object to the dependent object to use at run-time
2. The Role of Spring Boot

3. What is Spring Boot Starter?
 - Are dependency descriptors that can be added under the <dependencies> section in pom.xml.
There are around 50+ Spring Boot Starters for different Spring and related technologies. These starters give all the dependencies under a single name.
 - The advantages of using Starters are as follows:
	+ Increase productivity by decreasing the Configuration time for developers.
	+ Managing the POM is easier since the number of dependencies to be added is decreased.
	+ Tested, Production-ready, and supported dependency configurations.
	+ No need to remember the name and version of the dependencies.
	+ Increase productivity by decreasing the Configuration time for developers.
	+ Managing the POM is easier since the number of dependencies to be added is decreased.

4. @RestController vs @Controller?
 - Boths are Spring Annotion
 + Controller: marks this class as Spruing MVC Controller
 + RestController: use to make restful web services
5. How to Handle Exceptions in Spring Boot?
 + ControllerAdvice : Spring annotaion allow handling exceptions accross application
 + ExceptionHanlder: define in function to catch specific exception.
6. Which Annotation is Used to Handle Global Exception?
 + @ControllerAdvice
7. How Does Spring Boot Handle Standard MVC Exceptions?
8. JPA vs Hibernate
 + JPA:
	* Java Persistence API - is reponsible for managing relational db in Java applications
	* It is defined under the javax.persistence package.
	* is the Java specification and not the implementation.
 + Hibernate:
	* is an ORM tools used for saving the state of the Java object in the database.
	* It is defined under org.hibernate package.
	* Hibernate is an implementation of JPA and uses common standards of Java Persistence API.
9. What is Spring Security and How to Implement It
10. @Transactional
 + The @Transactional annotation is the metadata that specifies the semantics of the transactions on a method. We have two ways to rollback a transaction: declarative and programmatic.
11. What is Spring Boot Actuator?
 + Is a sub project of Spring Boot, which monitoring our app, gathering metrics, understanding traffic, or the state of our database become trivial with this dependency.
12. How to Implement OAuth 2.0?
8. What is Spring Boot Actuator? Intergration with Docker? Behavior of Application and Docker?
9. Explain ConditionalOnBean & ConditionOnMissingBean
10. Diff btw Spring Boot vs Spring MVC
3. What is the difference between @Configuration and @Component in Spring Boot?
 + Component: is used to annotate a class and automatically detect and register it as a bean
4. How would you implement a custom starter dependency in Spring Boot?
5. How would you secure a Spring Boot application using JWT?
8. When we create reactive microservices (webflux) with Spring Boot, what should we consider?
7. Describe a scenario that we need to disable autoconfiguration of Spring Boot and explain why?
 + exclude={DataSourceAutoConfiguration.class}
10. How we handle multiple resources, such as querying from many databases?
